Update operators : 

Examples :  $inc , $set , $unset

$ sign has multiple uses in mongodb
    -> precedes mql operators
    -> precedes aggregation pipelines stages //later on this course
    -> Allows access to field value








Comparision operators :
  
$eq = equal to         (it is a default operator which is always present even if we are not calling it)
$ne = not equal 
$gt = greater than      
$lt = less than 
$gte = Greater than or equal to 
$lte  = Less than or equal to 

Syntax to use this  : { <field> : { <operator> : <value> } }

// Inside Data Explorer 

    DB - sample_training 
    collection - trips

    {"tripduration" : { "$lte" : 60} } // here we searched for all the records whose tripduration 
    // is less than or equal to 60 .


    {"tripduration" : { "$lte" : 70} , "usertype" : { "$ne" : "subscriber" } }
    // here I searched for all the records where the tripdurations is less than or equal to 70
    // as well as the user is not a subscriber


// Equivalent commands in Mongo Shell are : 

    db.trip.find( {"tripduration" : { "$lte" : 60} } )
    db.trip.find( {"tripduration" : { "$lte" : 70} , "usertype" : { "$ne" : "subscriber" } } )











new topic : LOGIC operators ==>


$and : Match all of the specified query clauses  (this is used as an default operator when no operator is specified )
$or  : At least one of the query clauses is matched
$nor : Fail to match both given clauses
$not : Negates the query requirement

Syntax of $and , $or and $nor :

    { <operator> : [ {statement1}, {statement2},{statement3}, ...]}

Syntax of $not command is : 
    { $not : {statement}}

Using them in Data Explorer : 
    DB - sample_training , collection : inspections

    { $nor : [{"result" : "No Violation Issued"}, { "result" : "Violation Issued" } , {"result" : "Pass"} ]}  // this will give
    //all the records which will not include the result to be No Violation Issued , Violation Issued , Pass

Implicit AND  :-

    Find which student id is >25 and <100 in the sample_training.grades collection 

    we can specify a query like this:

        { $and : [ { "student_id" : { "$gt" : 25 }} , { "student_id" : { "$lt" : 100 }} ]}

    Better Option :

        { "student_id" : {"$gt" : 25 , "lt" : 100}}

Explicit AND :- 
    so we may think that when we have to explicit include and ?
    The answer is when you need to include the same operator more than once in a query

    For example : in route collection we might be interrestd to see how many CR2 and A81 airplanes come through the KZN airport ?

    { $or : [ { dst_airport : "KZN"  }  , {src_airport : "KZN" } ]}

    and 

    { $or : [{airplane : "CR2" }, {airplane : "A81" }]}


    Data Explorer : { $and : [ { $or : [ { "dst_airport" : "KZN"  }  , { "src_airport" : "KZN" } ]} , { $or : [{"airplane" : "CR2" }, {"airplane" : "A81" }]}] }

    Inside Mongo Shell : db.routes.find( { $and : [ { $or : [ { "dst_airport" : "KZN"  }  , { "src_airport" : "KZN" } ]} , { $or : [{"airplane" : "CR2" }, {"airplane" : "A81" }]}] } )


db.companies.find ({ $and : [ { $or : [ { "founded_year" : 2004 } , {"founded_month" : 10 } ] , { $or : [ { "category_code" : "social" } , { "category_code" : "web" } ] }  ] }).count()





Expressive Query operator : 

    $expr allows the use of aggregation expressions within the query language

    $expr allows us to use the variables and conditions statements 

    { "$expr" : { "$eq" : [ "$start station id" , "$end station id" ] } }  // this will give us all the records in which
    // the start station id is equals to the end station id irrespective of their values

    $ denotes the use of operator
    $ addresses the field value


    In Mngo Shell : db.trips.find( { "$expr" : { "$eq" : [ "$start station id" , "$end station id" ] } } ).count()
                    db.trips.find( { "$expr" : { "$and": [ { "$gt": [ "$tripduration", 1200 ]} , { "$eq" : [ "$start station id" , "$end station id" ] } } ).count()
                    
MQL syntax : { <field> : { < operator > : <value> } }
Aggregation syntax : { <operator> : { <field> , <value> } }







Array operators : 


$push :  Allows us to add an element into Array
$push : Turns a field into an array field if it was previously a different type

db name : sample_airbnb
collection name : listingsAndReviews

$all : this will give us all the result that will match will atleast one result
{ "amenities" : { $all :  ["Cable TV","TV" , "Internet", "Wifi", "Family/kid friendly", "Washer" , "Essentials" ,"Shampoo", "24-hour check-in" , "Hangers" , "Hair dryer" , "Iron" ] } }

{ <array> : { "$size" : <number> } }
Returns a cursor with all documents where the specified array field is exactly the given length

{ <array field> : {$all : <array> } }
Returns a cursor with all documents in which the specified array field contains all the given
elements regardless of their order in the array.

Projection Syntax : db.<collection>.find( { <query> } , { <Projection> } )
1 - include the field 
0 - not include the field
use only 1 or only 0

db.trips.find ( { "usertype" : "Subscriber" }, { "tripduration":1 , "gender" : 1 } ).pretty()

exception : when you want to exclude id field 1's and 0's will appear together in that query 

            example : db.<collection>.find ( { <query> } , { <field1> : 1  , "_id" : 0 })


Lab1 : Array operator: 
 { "$expr" : { "$and": [{ "$gt" : [ "$accommodates" , 6 ] } , { "$eq" : [ "$number_of_reviews", 50 ] } ] }}

 { "$and" : [{ "property_type" : "House"} , { "amenities" : { $all : ["Changing table"] } } ] } 
 use sample_training










Find all documents with exactly 20 amenities which include all the amenities listed in the query array, and display their price and address:

db.listingsAndReviews.find({ "amenities":
        { "$size": 20, "$all": [ "Internet", "Wifi",  "Kitchen", "Heating",
                                 "Family/kid friendly", "Washer", "Dryer",
                                 "Essentials", "Shampoo", "Hangers",
                                 "Hair dryer", "Iron",
                                 "Laptop friendly workspace" ] } },
                            {"price": 1, "address": 1}).pretty()
 
Find all documents that have Wifi as one of the amenities only include price and address in the resulting cursor:

db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1, "_id": 0 }).pretty()
 
Find all documents that have Wifi as one of the amenities only include price and address in the resulting cursor, also exclude ``"maximum_nights"``. **This will be an error:*

db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1,
                             "_id": 0, "maximum_nights":0 }).pretty()
 
Switch to this database:

use sample_training
 
Get one document from the collection:

db.grades.findOne()
 
Find all documents where the student in class 431 received a grade higher than 85 for any type of assignment:

db.grades.find({ "class_id": 431 },
               { "scores": { "$elemMatch": { "score": { "$gt": 85 } } }
             }).pretty()
 
Find all documents where the student had an extra credit score:

db.grades.find({ "scores": { "$elemMatch": { "type": "extra credit" } }
               }).pretty()



















MQL uses dot oprator to specify the address of nested elements in a document


db.trips.findOne({ "start station location.type": "Point" })



db.companies.find({ "relationships.0.person.last_name": "Zuckerberg" },
                  { "name": 1 }).pretty()

db.companies.find({ "relationships.0.person.first_name": "Mark",
                    "relationships.0.title": { "$regex": "CEO" } },
                  { "name": 1 }).count()


db.companies.find({ "relationships.0.person.first_name": "Mark",
                    "relationships.0.title": {"$regex": "CEO" } },
                  { "name": 1 }).pretty()

db.companies.find({ "relationships":
                      { "$elemMatch": { "is_past": true,
                                        "person.first_name": "Mark" } } },
                  { "name": 1 }).pretty()

db.companies.find({ "relationships":
                      { "$elemMatch": { "is_past": true,
                                        "person.first_name": "Mark" } } },
                  { "name": 1 }).count()



db.trips.find({ "start station location.coordinates.0" : -74 }).count()








AAGREGATION FRAMEWORK ==> In its simplest form , another way to query data in mongodb


FIND all the documents that have wifi as one of the amenities
only include price and address in the resulting cursor

db.listingsAndReviews.find ({"amenities" : "Wifi"},
{"price" : 1 , "address" : 1, "_id" : 0 }).pretty()
)


db.listingsAndReviews.aggregate([
    {$match : {"amenities" : "Wifi"}},
    { $project : {"price" : 1 , "address":1 , "_id":0}}
])


which countries are listed in the sample_airbnb.listingsAndReviews collection ?
Syntax: 
{ $group : 
    {
        _id : <expression> , //Group by expression
        <field> : { <accumulator1> : <expression> },
        ...
    }
}

db.listingsAndReviews.aggregate( [ {$project" : {"address" :1 , "_id" : 0}}
    , {$group : { _id : "$address.country"}}
] )


How many distinct countries have listings , and how many listings does each country have ?

db.listingsAndReviews.aggregate([
    {$project: {"address" :1 , "_id" : 0}} , 
    {$group : {_id : "$address.country" , "count" : {"$sum" : 1}}}
])








Sort() and Limit()  ==>

use sample training database 
db.zips.find().sort({"pop" : 1}).limit(1).pretty()
//here pop : 1 is sorting in increasing order

db.zips.find().sort({"pop" : -1}).limit(1);
//here pop : -1 is sorting in reverse order.

db.zips.find().sort({"pop" : -1}).limit(10);
this wil give us top 10 populated zip codes

we should always use sort() and then limit()




db.trips.find( {"birth year" : {"$ne" : null} }, { "birth year" :1 }).sort( {"birth year" : -1} ).limit(2).pretty()




Index : It optimises queries

Create Index:  db.trips.createIndex( {"birth year" : 1} )
Compound Indexes : db.trips.createIndex({"start station id" : 1 , "birth year" :1})


use sample_training

db.trips.find({ "birth year": 1989 })

db.trips.find({ "start station id": 476 }).sort( { "birth year": 1 } )

db.trips.createIndex({ "birth year": 1 })

db.trips.createIndex({ "start station id": 1, "birth year": 1 })






DATA MODELING : A way to organize fields in a document to support
                your application performance and querying capabilities


Rule : data is stored in the way that it is used








Advantages of using MongoDB : 
    1.)Performance is good
    2.)Document Model
    3.)Flexible Schema


Disadvantages of using MongoDB :
    1.)NO Transactions
    2.)NO join
    3.)Memory Limitation